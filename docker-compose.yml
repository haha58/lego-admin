# 统一的版本号
version: '3'
# 服务
services:
    # service name, 自定义, 不能重复
    editor-server:
        #相当于docker build -t <name> .
        build:
            # 当前目录
            context: .
            # 基于 Dockerfile 构建
            dockerfile: Dockerfile
        # 依赖于当前 Dockerfile 创建出来的镜像名称
        image: editor-server
        # 容器名称
        container_name: editor-server
        restart: always
        # 端口映射 宿主机通过 8081 访问
        ports:
            - 8081:3000
        depends_on:
            editor-mysql:
                condition: service_healthy
            editor-redis:
                condition: service_healthy
            editor-mongo:
                condition: service_healthy
        networks:
            - back-tier
    # service name
    editor-redis:
        # 引用官方 redis 镜像
        image: redis
        # 容器名称
        container_name: editor-redis
        restart: always
        # 端口映射
        ports:
            # 宿主机,可以用 127.0.0.1:6378 即可连接容器中的数据库  'redis-cli -h 127.0.0.1 -p 6378'
            # 6379 可能被宿主机的 redis 所占用, 防止冲突使用 6378
            # 但是, 其它 docker 容器不能, 因为此时 127.0.0.1 是 docker 容器本身, 而不是宿主机
            - 6378:6379
            # 环境变量
        environment:
            # 设置时区
            - TZ=Asia/Shanghai
        command: redis-server --requirepass 123456
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 1s
            timeout: 3s
            retries: 30
        networks:
            - back-tier
    # service name
    editor-mysql:
        # 引用官网 mysql 镜像
        image: mysql
        container_name: editor-mysql
        # 出错重启
        restart: always
        # 高权限，执行下面的 mysql/init
        privileged: true
        # 解决无法远程访问的问题
        command: --default-authentication-plugin=mysql_native_password
        ports:
            # 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库
            - 3305:3306
        healthcheck:
            test: mysql lego-template --user=root --password=123456 --silent --execute "SELECT 1;"
            interval: 30s
            timeout: 10s
            retries: 5  
        volumes:
            # 记录日志
            - .docker-volumes/mysql/log:/var/log/mysql
            # 数据持久化
            - .docker-volumes/mysql/data:/var/lib/mysql
            # 初始化 sql
            - ./mysql/init:/docker-entrypoint-initdb.d/
        environment:
            # 初始化容器时创建数据库
            - MYSQL_DATABASE=lego-template
            - MYSQL_ROOT_PASSWORD=123456
            # 设置时区
            - TZ=Asia/Shanghai
        networks:
            - back-tier
    editor-mongo:
        # 引用官网 mongo 镜像
        image: mongo
        # 容器名称
        container_name: editor-mongo
        # 出错重启
        restart: always
        # 文件映射
        volumes:
            # 数据持久化
            - '.docker-volumes/mongo/data:/data/db'
        environment:
            - MONGO_INITDB_ROOT_USERNAME=admin
            - MONGO_INITDB_ROOT_PASSWORD=123456
            - MONGO_INITDB_DATABASE=lego-template-detail
            # 设置时区
            - TZ=Asia/Shanghai
        ports:
            # 宿主机可以用 127.0.0.1:27016 即可连接容器中的数据库
            - '27016:27017'
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
        networks:
            - back-tier
networks:
  back-tier:
    driver: bridge
